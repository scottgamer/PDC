import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

/**
 *
 * @author Aspire
 */
public class Tanimoto implements Runnable{
    
    public String a;// = "Cccc@@";
    public String b;// = "CccC@@";
    
    public Tanimoto(){
        
    }
    
    public static char [] toCharArray(String str){
        char [] a;
        a = str.toCharArray();
        return a;
    }
    
    public static char [] filtrar(char [] arreglo){
        
        for(int i=0; i<arreglo.length;i++){
            if(arreglo[i] == '@'){
                arreglo[i]=' ';
            }
        }
        return arreglo;
    }
    
    public static int contarArroba(char [] arreglo){
        int cont=0;
        for(int i=0; i<arreglo.length;i++){
            if(arreglo[i] == '@'){
                cont = 1;
            }
        }
        return cont;
    }
    
    
   public static char [][] matrizCaracteres(char [] arreglo1, char [] arreglo2){
        int cont=0;
        char [][] matriz = new char[2][arreglo1.length];
        
        for(int i=0; i<arreglo1.length;i++){
            for(int j=0; j<arreglo2.length;j++){
                if(arreglo1[i]==arreglo2[j]){
                    cont += 1;
                    matriz[0][i]=arreglo1[i];
                    matriz[1][i]=Character.forDigit(cont, 10);
                }
            }
            cont = 0;
        }
        
        return matriz;
    }
    
   public static void imprimirMatriz(char[][] matriz, int n){
        
        for(int i=0;i<2;i++){
            for(int j=0;j<n;j++){
                System.out.print(matriz[i][j] + "  ");
            }
            System.out.println();
        }
    }
    
    public static void main(String [] args) throws IOException{
        
        
        long startTime = System.nanoTime();
        
        //ct.imprimirMatriz(matrizCaracteres, arregloCaracteresSimplif.length);
        Runnable proceso1=new Tanimoto();
        
        new Thread(proceso1).start();


//        System.out.println(arregloCaracteresSimplif);
//        System.out.println(arregloCaracteresCompara);
//        System.out.println(arregloCaracteresSimplif.length);
        //System.out.println(arregloCaracteresSimplif);
        
      //  leerArchivo();
      
       long endTime = System.nanoTime();

    System.out.println("DuraciÃ³n: " + (endTime-startTime)/1e6 + " ms");      
      
    }
    
    public static void leerArchivo() throws FileNotFoundException, IOException{
        try {
            String linea = null;
        
            File file = new File("./files/entrada.txt");
            FileReader fileReader = new FileReader(file);
            BufferedReader buffer = new BufferedReader(fileReader);

            while ((linea=buffer.readLine())!=null) {
                
                System.out.println(linea);
                
            }
            buffer.close();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        int contArroba=0;
        //String cadena = "Cccc@@";
        String cadenaCompara = "Ccc@@Ff";
        
        //ComparaThread ct=new ComparaThread();
        
              
        char [] arregloCaracteresCompara = new char[cadenaCompara.length()];
        arregloCaracteresCompara = toCharArray(cadenaCompara);
        
        char [][] matrizCaracteres = new char [2][cadenaCompara.length()];
        
        
        //1. leer cadena/archivo segun corresponda
        String cadena = "Cccc@@";
        //2. convertir en arreglo caracteres
        char [] arregloCaracteres = new char[cadena.length()];
        arregloCaracteres = toCharArray(cadena);
        //3. contar '@'
        contArroba = contarArroba(arregloCaracteres);
        //4. filtrar '@'
        //se elimina '@' si lo hubiere
        char [] arregloCaracteresSimplif = new char[cadena.length()];
        arregloCaracteresSimplif=filtrar(arregloCaracteres);
        //5. se compara cadena con cadenaCompara
        //se obtiene una matriz con los caracteres y sus repeticiones
        matrizCaracteres = matrizCaracteres(arregloCaracteresSimplif, arregloCaracteresCompara);
        //ct.matrizCaracteres(arregloCaracteresSimplif, arregloCaracteresCompara);
        imprimirMatriz(matrizCaracteres,arregloCaracteresSimplif.length);
        
    }    
    
}
